package io.github.moreirasantos.knooq

import io.github.moreirasantos.knooq.DSL.keyword
import io.github.moreirasantos.knooq.RenderKeywordCase.*
import io.github.moreirasantos.knooq.context.Context


class Keyword(private val asIs: String) /*: AbstractQueryPart()*/ {
    private var lower: String? = null
    private var upper: String? = null
    private var pascal: String? = null
    fun accept(ctx: Context<*>) {
        if (ctx.separatorRequired) ctx.sql(' ')
        ctx.sql(render(ctx), true)
    }

    private fun render(ctx: Context<*>): String {
        val style: RenderKeywordCase = ctx.getRenderKeywordCase()
        return when (style) {
            AS_IS -> asIs
            LOWER -> lower ?: asIs.lowercase().also { lower = it }
            UPPER -> upper ?: asIs.uppercase().also { upper = it }
            PASCAL -> pascal ?: pascal(asIs).also { pascal = it }
        }
    }

    companion object {
        private fun pascal(keyword: String) =
            if (keyword.isEmpty()) keyword
            else if (keyword.indexOf(' ') >= 0) {

                buildString {
                    var prev = 0
                    var next: Int
                    do {
                        next = keyword.indexOf(' ', prev)
                        if (prev > 0) append(' ')
                        append(keyword[prev].uppercaseChar())
                        append(keyword.substring(prev + 1, if (next == -1) keyword.length else next).lowercase())
                        prev = next + 1
                    } while (next != -1)
                    toString()

                }
            } else keyword[0].uppercaseChar().toString() + keyword.substring(1).lowercase()
    }
}

enum class RenderKeywordCase {
    AS_IS,
    LOWER,
    UPPER,
    PASCAL;
}


object Keywords {
    val K_ABSENT = keyword("absent")
    val K_ADD = keyword("add")
    val K_AFTER = keyword("after")
    val K_ALIAS = keyword("alias")
    val K_ALL = keyword("all")
    val K_ALTER = keyword("alter")
    val K_ALTER_COLUMN = keyword("alter column")
    val K_ALTER_CONSTRAINT = keyword("alter constraint")
    val K_ALTER_INDEX = keyword("alter index")
    val K_ALTER_SCHEMA = keyword("alter schema")
    val K_ALTER_TABLE = keyword("alter table")
    val K_AND = keyword("and")
    val K_ARRAY = keyword("array")
    val K_AS = keyword("as")
    val K_AS_OF = keyword("as of")
    val K_ATOMIC = keyword("atomic")
    val K_AUTO = keyword("auto")
    val K_AUTOINCREMENT = keyword("autoincrement")
    val K_AUTO_INCREMENT = keyword("auto_increment")
    val K_BEFORE = keyword("before")
    val K_BEGIN = keyword("begin")
    val K_BEGIN_CATCH = keyword("begin catch")
    val K_BEGIN_TRY = keyword("begin try")
    val K_BETWEEN = keyword("between")
    val K_BLOB = keyword("blob")
    val K_BOOLEAN = keyword("boolean")
    val K_BOTH = keyword("both")
    val K_BREAK = keyword("break")
    val K_BULK_COLLECT_INTO = keyword("bulk collect into")
    val K_BY = keyword("by")
    val K_CACHE = keyword("cache")
    val K_CALL = keyword("call")
    val K_CASCADE = keyword("cascade")
    val K_CASE = keyword("case")
    val K_CAST = keyword("cast")
    val K_CATALOG = keyword("catalog")
    val K_CHANGE = keyword("change")
    val K_CHANGE_COLUMN = keyword("change column")
    val K_CHARACTER_SET = keyword("character set")
    val K_CHECK = keyword("check")
    val K_COALESCE = keyword("coalesce")
    val K_COLLATE = keyword("collate")
    val K_COLLATION = keyword("collation")
    val K_COLUMN = keyword("column")
    val K_COLUMNS = keyword("columns")
    val K_COMMENT = keyword("comment")
    val K_CONNECT_BY = keyword("connect by")
    val K_CONSTRAINT = keyword("constraint")
    val K_CONSTRAINTS = keyword("constraints")
    val K_CONTAINED = keyword("contained")
    val K_CONTENT = keyword("content")
    val K_CONTINUE = keyword("continue")
    val K_CONTINUE_IDENTITY = keyword("continue identity")
    val K_CREATE = keyword("create")
    val K_CROSS_JOIN_LATERAL = keyword("cross join lateral")
    val K_CUBE = keyword("cube")
    val K_CURRENT = keyword("current")
    val K_CURRENT_ROW = keyword("current row")
    val K_CURRENT_SCHEMA = keyword("current_schema")
    val K_CURRENT_VALUE_FOR = keyword("current value for")
    val K_CURRVAL = keyword("currval")
    val K_CYCLE = keyword("cycle")
    val K_DATABASE = keyword("database")
    val K_DATE = keyword("date")
    val K_DATETIME = keyword("datetime")
    val K_DATETIME2 = keyword("datetime2")
    val K_DATETIMEOFFSET = keyword("datetimeoffset")
    val K_DAY = keyword("day")
    val K_DAY_MICROSECOND = keyword("day_microsecond")
    val K_DAY_MILLISECOND = keyword("day_millisecond")
    val K_DAY_TO_SECOND = keyword("day_to_second")
    val K_DECIMAL = keyword("decimal")
    val K_DECLARE = keyword("declare")
    val K_DEFAULT = keyword("default")
    val K_DEFAULT_VALUES = keyword("default values")
    val K_DELETE = keyword("delete")
    val K_DENSE_RANK = keyword("dense_rank")
    val K_DISABLE = keyword("disable")
    val K_DISTINCT = keyword("distinct")
    val K_DISTINCT_ON = keyword("distinct on")
    val K_DO = keyword("do")
    val K_DOCUMENT = keyword("document")
    val K_DOMAIN = keyword("domain")
    val K_DO_NOTHING = keyword("do nothing")
    val K_DO_UPDATE = keyword("do update")
    val K_DROP = keyword("drop")
    val K_DROP_COLUMN = keyword("drop column")
    val K_DROP_CONSTRAINT = keyword("drop constraint")
    val K_DROP_DEFAULT = keyword("drop default")
    val K_DROP_INDEX = keyword("drop index")
    val K_DROP_NOT_NULL = keyword("drop not null")
    val K_DROP_SCHEMA = keyword("drop schema")
    val K_DROP_TABLE = keyword("drop table")
    val K_DROP_VIEW = keyword("drop view")
    val K_DUAL = keyword("dual")
    val K_ELEMENTS = keyword("elements")
    val K_ELSE = keyword("else")
    val K_ELSEIF = keyword("elseif")
    val K_ELSIF = keyword("elsif")
    val K_EMPTY = keyword("empty")
    val K_ENABLE = keyword("enable")
    val K_END = keyword("end")
    val K_END_CATCH = keyword("end catch")
    val K_END_IF = keyword("end if")
    val K_END_LOOP = keyword("end loop")
    val K_END_TRY = keyword("end try")
    val K_ENFORCED = keyword("enforced")
    val K_ENUM = keyword("enum")
    val K_ERROR = keyword("error")
    val K_ESCAPE = keyword("escape")
    val K_EXCEPT = keyword("except")
    val K_EXCEPTION = keyword("exception")
    val K_EXCLUDE = keyword("exclude")
    val K_EXEC = keyword("exec")
    val K_EXECUTE = keyword("execute")
    val K_EXECUTE_BLOCK = keyword("execute block")
    val K_EXECUTE_IMMEDIATE = keyword("execute immediate")
    val K_EXECUTE_STATEMENT = keyword("execute statement")
    val K_EXISTS = keyword("exists")
    val K_EXIT = keyword("exit")
    val K_FALSE = keyword("false")
    val K_FETCH_FIRST = keyword("fetch first")
    val K_FETCH_NEXT = keyword("fetch next")
    val K_FILTER = keyword("filter")
    val K_FINAL_TABLE = keyword("final table")
    val K_FIRST = keyword("first")
    val K_FOLLOWING = keyword("following")
    val K_FOR = keyword("for")
    val K_FORALL = keyword("forall")
    val K_FOREIGN_KEY = keyword("foreign key")
    val K_FORMAT = keyword("format")
    val K_FOR_PORTION_OF = keyword("for portion of")
    val K_FOR_SHARE = keyword("for share")
    val K_FOR_UPDATE = keyword("for update")
    val K_FROM = keyword("from")
    val K_FUNCTION = keyword("function")
    val K_GENERATED_BY_DEFAULT_AS_IDENTITY = keyword("generated by default as identity")
    val K_GLOBAL_TEMPORARY = keyword("global temporary")
    val K_GOTO = keyword("goto")
    val K_GRANT = keyword("grant")
    val K_GRANT_OPTION_FOR = keyword("grant option for")
    val K_GROUPING_SETS = keyword("grouping sets")
    val K_GROUP_BY = keyword("group by")
    val K_HAVING = keyword("having")
    val K_HOUR = keyword("hour")
    val K_HOUR_TO_SECOND = keyword("hour to second")
    val K_IDENTITY = keyword("identity")
    val K_IF = keyword("if")
    val K_IF_EXISTS = keyword("if exists")
    val K_IF_NOT_EXISTS = keyword("if not exists")
    val K_IGNORE = keyword("ignore")
    val K_IGNORE_NULLS = keyword("ignore nulls")
    val K_IMMEDIATE = keyword("immediate")
    val K_IN = keyword("in")
    val K_INCLUDE = keyword("include")
    val K_INCLUDE_NULL_VALUES = keyword("include_null_values")
    val K_INCREMENT_BY = keyword("increment by")
    val K_INDEX = keyword("index")
    val K_INLINE = keyword("inline")
    val K_INNER_JOIN = keyword("inner join")
    val K_INSERT = keyword("insert")
    val K_INT = keyword("int")
    val K_INTERVAL = keyword("interval")
    val K_INTO = keyword("into")
    val K_IS = keyword("is")
    val K_IS_DOCUMENT = keyword("is document")
    val K_IS_JSON = keyword("is json")
    val K_IS_NOT_DOCUMENT = keyword("is not document")
    val K_IS_NOT_JSON = keyword("is not json")
    val K_IS_NOT_NULL = keyword("is not null")
    val K_IS_NULL = keyword("is null")
    val K_ITERATE = keyword("iterate")
    val K_JSON = keyword("json")
    val K_JSON_ARRAY = keyword("json_array")
    val K_JSON_EXISTS = keyword("json_exists")
    val K_JSON_OBJECT = keyword("json_object")
    val K_JSON_TABLE = keyword("json_table")
    val K_KEEP = keyword("keep")
    val K_KEY = keyword("key")
    val K_KEYS = keyword("keys")
    val K_LAST = keyword("last")
    val K_LATERAL = keyword("lateral")
    val K_LEADING = keyword("leading")
    val K_LEAVE = keyword("leave")
    val K_LEFT_JOIN_LATERAL = keyword("left join lateral")
    val K_LEFT_OUTER_JOIN_LATERAL = keyword("left outer join lateral")
    val K_LIKE = keyword("like")
    val K_LIKE_REGEX = keyword("like_regex")
    val K_LIMIT = keyword("limit")
    val K_LOCK_IN_SHARE_MODE = keyword("lock in share mode")
    val K_LOOP = keyword("loop")
    val K_MATCHED = keyword("matched")
    val K_MATERIALIZE = keyword("materialize")
    val K_MATERIALIZED = keyword("materialized")
    val K_MAXVALUE = keyword("maxvalue")
    val K_MERGE_INTO = keyword("merge into")
    val K_MILLISECOND = keyword("millisecond")
    val K_MINUS = keyword("minus")
    val K_MINUTE = keyword("minute")
    val K_MINVALUE = keyword("minvalue")
    val K_MOD = keyword("mod")
    val K_MODIFY = keyword("modify")
    val K_MONTH = keyword("month")
    val K_MULTISET = keyword("multiset")
    val K_NAME = keyword("name")
    val K_NEW_TABLE = keyword("new table")
    val K_NEXTVAL = keyword("nextval")
    val K_NEXT_VALUE_FOR = keyword("next value for")
    val K_NO = keyword("no")
    val K_NOCYCLE = keyword("nocycle")
    val K_NONCLUSTERED = keyword("nonclustered")
    val K_NOT = keyword("not")
    val K_NOT_ENFORCED = keyword("not enforced")
    val K_NOT_EXISTS = keyword("not exists")
    val K_NOT_IN = keyword("not in")
    val K_NOT_NULL = keyword("not null")
    val K_NOWAIT = keyword("nowait")
    val K_NULL = keyword("null")
    val K_NULLS_FIRST = keyword("nulls first")
    val K_NULLS_LAST = keyword("nulls last")
    val K_NUMERIC = keyword("numeric")
    val K_NVARCHAR = keyword("nvarchar")
    val K_OF = keyword("of")
    val K_OFFSET = keyword("offset")
    val K_OLD_TABLE = keyword("old table")
    val K_ON = keyword("on")
    val K_ON_COMMIT_DELETE_ROWS = keyword("on commit delete rows")
    val K_ON_COMMIT_DROP = keyword("on commit drop")
    val K_ON_COMMIT_PRESERVE_ROWS = keyword("on commit preserve rows")
    val K_ON_CONFLICT = keyword("on conflict")
    val K_ON_CONSTRAINT = keyword("on constraint")
    val K_ON_DELETE = keyword("on delete")
    val K_ON_DUPLICATE_KEY_UPDATE = keyword("on duplicate key update")
    val K_ON_UPDATE = keyword("on update")
    val K_OPEN = keyword("open")
    val K_OR = keyword("or")
    val K_ORDER = keyword("order")
    val K_ORDER_BY = keyword("order by")
    val K_ORDINALITY = keyword("ordinality")
    val K_OUTPUT = keyword("output")
    val K_OVER = keyword("over")
    val K_OVERLAPS = keyword("overlaps")
    val K_PARTITION_BY = keyword("partition by")
    val K_PASSING = keyword("passing")
    val K_PATH = keyword("path")
    val K_PERCENT = keyword("percent")
    val K_PERIOD = keyword("period")
    val K_PIVOT = keyword("pivot")
    val K_PLACING = keyword("placing")
    val K_POSITION = keyword("position")
    val K_PRECEDING = keyword("preceding")
    val K_PREVIOUS_VALUE_FOR = keyword("previous value for")
    val K_PRIMARY_KEY = keyword("primary key")
    val K_PRIOR = keyword("prior")
    val K_PROCEDURE = keyword("procedure")
    val K_PUBLIC = keyword("public")
    val K_QUALIFY = keyword("qualify")
    val K_RAISE = keyword("raise")
    val K_RAISERROR = keyword("raiserror")
    val K_RAW = keyword("raw")
    val K_READPAST = keyword("readpast")
    val K_RECORD = keyword("record")
    val K_RECURSIVE = keyword("recursive")
    val K_REF = keyword("ref")
    val K_REFERENCES = keyword("references")
    val K_REGEXP = keyword("regexp")
    val K_RENAME = keyword("rename")
    val K_RENAME_COLUMN = keyword("rename column")
    val K_RENAME_CONSTRAINT = keyword("rename constraint")
    val K_RENAME_INDEX = keyword("rename index")
    val K_RENAME_OBJECT = keyword("rename object")
    val K_RENAME_SEQUENCE = keyword("rename sequence")
    val K_RENAME_TABLE = keyword("rename table")
    val K_RENAME_TO = keyword("rename to")
    val K_REPEAT = keyword("repeat")
    val K_REPLACE = keyword("replace")
    val K_RESPECT_NULLS = keyword("respect nulls")
    val K_RESTART = keyword("restart")
    val K_RESTART_IDENTITY = keyword("restart identity")
    val K_RESTART_WITH = keyword("restart with")
    val K_RESTRICT = keyword("restrict")
    val K_RETURN = keyword("return")
    val K_RETURNING = keyword("returning")
    val K_REVERSE = keyword("reverse")
    val K_REVOKE = keyword("revoke")
    val K_ROOT = keyword("root")
    val K_ROW = keyword("row")
    val K_ROWCOUNT = keyword("rowcount")
    val K_ROWLOCK = keyword("rowlock")
    val K_ROWS = keyword("rows")
    val K_ROWS_FROM = keyword("rows from")
    val K_ROWS_ONLY = keyword("rows only")
    val K_ROWS_WITH_TIES = keyword("rows with ties")
    val K_SCHEMA = keyword("schema")
    val K_SCN = keyword("scn")
    val K_SEARCH_PATH = keyword("search_path")
    val K_SECOND = keyword("second")
    val K_SELECT = keyword("select")
    val K_SEPARATOR = keyword("separator")
    val K_SEQUENCE = keyword("sequence")
    val K_SERIAL = keyword("serial")
    val K_SERIAL4 = keyword("serial4")
    val K_SERIAL8 = keyword("serial8")
    val K_SESSION = keyword("session")
    val K_SET = keyword("set")
    val K_SET_DATA_TYPE = keyword("set data type")
    val K_SET_DEFAULT = keyword("set default")
    val K_SET_NOT_NULL = keyword("set not null")
    val K_SIBLINGS = keyword("siblings")
    val K_SIGNAL = keyword("signal")
    val K_SKIP = keyword("skip")
    val K_SQL = keyword("sql")
    val K_SQLCODE = keyword("sqlcode")
    val K_SQLSTATE = keyword("sqlstate")
    val K_START_AT = keyword("start at")
    val K_START_WITH = keyword("start with")
    val K_STORING = keyword("storing")
    val K_SWITCH = keyword("switch")
    val K_SYMMETRIC = keyword("symmetric")
    val K_TABLE = keyword("table")
    val K_TEMPORARY = keyword("temporary")
    val K_THEN = keyword("then")
    val K_THROW = keyword("throw")
    val K_TIME = keyword("time")
    val K_TIMESTAMP = keyword("timestamp")
    val K_TIMESTAMP_WITH_TIME_ZONE = keyword("timestamp with time zone")
    val K_TIME_WITH_TIME_ZONE = keyword("time with time zone")
    val K_TO = keyword("to")
    val K_TOP = keyword("top")
    val K_TRAILING = keyword("trailing")
    val K_TRIM = keyword("trim")
    val K_TRUE = keyword("true")
    val K_TRUNCATE_TABLE = keyword("truncate table")
    val K_TYPE = keyword("type")
    val K_UNBOUNDED_FOLLOWING = keyword("unbounded following")
    val K_UNBOUNDED_PRECEDING = keyword("unbounded preceding")
    val K_UNIQUE = keyword("unique")
    val K_UNNEST = keyword("unnest")
    val K_UNTIL = keyword("until")
    val K_UPDATE = keyword("update")
    val K_UPDLOCK = keyword("updlock")
    val K_UPSERT = keyword("upsert")
    val K_USE = keyword("use")
    val K_USING = keyword("using")
    val K_USING_INDEX = keyword("using index")
    val K_VALUE = keyword("value")
    val K_VALUES = keyword("values")
    val K_VARCHAR = keyword("varchar")
    val K_VERSIONS = keyword("versions")
    val K_VIEW = keyword("view")
    val K_WHEN = keyword("when")
    val K_WHERE = keyword("where")
    val K_WHILE = keyword("while")
    val K_WINDOW = keyword("window")
    val K_WITH = keyword("with")
    val K_WITHIN_GROUP = keyword("within group")
    val K_WITHOUT_ARRAY_WRAPPER = keyword("without_array_wrapper")
    val K_WITH_CHECK_OPTION = keyword("with check option")
    val K_WITH_DATA = keyword("with data")
    val K_WITH_GRANT_OPTION = keyword("with grant option")
    val K_WITH_LOCK = keyword("with lock")
    val K_WITH_NO_DATA = keyword("with no data")
    val K_WITH_NO_DATACOPY = keyword("with no datacopy")
    val K_WITH_PRIMARY_KEY = keyword("with primary key")
    val K_WITH_READ_ONLY = keyword("with read only")
    val K_WITH_ROLLUP = keyword("with rollup")
    val K_WITH_TIES = keyword("with ties")
    val K_XML = keyword("xml")
    val K_XMLEXISTS = keyword("xmlexists")
    val K_XMLTABLE = keyword("xmltable")
    val K_YEAR = keyword("year")
    val K_YEAR_MONTH = keyword("year_month")
    val K_YEAR_TO_DAY = keyword("year to day")
    val K_YEAR_TO_FRACTION = keyword("year to fraction")
    val K_YEAR_TO_MONTH = keyword("year to month")
}


